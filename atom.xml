<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[@TheKeyboard]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2020-01-18T16:44:00+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[OpenCFP Engineering Diary -- Adding Doctrine]]></title>
            <link href="/atthekeyboard/2019/12/02/opencfp-engineering-diary-adding-doctrine/"/>
            <updated>2019-12-02T00:00:00+00:00</updated>
            <id>/atthekeyboard/2019/12/02/opencfp-engineering-diary-adding-doctrine/</id>
            <content type="html"><![CDATA[<h2 id="tl%3Bdr---adding-support-to-an-existing-symfony-3.4-application-for-doctrine">TL;DR - Adding support to an existing Symfony 3.4 application for Doctrine</h2>

<p>(If you like the work I do on OpenCFP, please consider sponsoring me at
<a href="https://github.com/sponsors/chartjes/">https://github.com/sponsors/chartjes/</a>)</p>

<p>Part of the medium-term planning for <a href="https://github.com/opencfp/opencfp">OpenCFP</a> is
to refactor the application to stop using <a href="https://cartalyst.com/manual/sentinel/">Sentinel</a>
as the authentication and ACL choice and start using the <a href="https://symfony.com/doc/current/security.html">Symfony Scurity</a>
component.</p>

<p>When OpenCFP was first built it was a more standalone solution and I picked Sentinel's
predecessor, Sentry. As it got deprecated, we moved to Sentinel and along the way we
added in some code to make <a href="https://laravel.com/docs/5.8/eloquent">Eloquent</a> easier to
use within the app. When switching to be more Symfony-based, Doctrine is the ORM that
needs to be used. So I have a refactoring process that looks like this:</p>

<ul>
<li>Get Doctrine and it's dependencies into the project</li>
<li>Refactor everything <em>except</em> our auth stuff to use Doctrine</li>
<li>Refactor our authentication and authorization code to use Symfony Security</li>
<li>Remove Sentinel and all it's dependencies</li>
</ul>

<p>I had not used Doctrine in many many years so a lot of things have changed. Given
all the trouble I had, I figured I was not alone so it makes sense to document
the changes and additions I made.</p>

<p>As with most work I do on OpenCFP, this was a journey of discovering things I needed to
know that I did not know.</p>

<h2 id="packages">Packages</h2>

<p>Following the directions for <a href="https://symfony.com/doc/3.4/doctrine.html">Symfony 3.4</a> I
installed my dependencies:</p>

<pre><code class="bash">composer require doctrine/orm
composer require doctrine/doctrine-bundle
composer require doctrine/doctrine-cache-bundle
</code></pre>

<p>Right now, <code>composer show</code> says I have the following Doctrine-related packages installed now</p>

<pre><code class="bash">doctrine/annotations                v1.8.0  
doctrine/cache                      1.9.1   
doctrine/collections                1.6.4   
doctrine/common                     v2.11.0 
doctrine/data-fixtures              1.4.0   
doctrine/dbal                       v2.10.0 
doctrine/doctrine-bundle            1.12.2  
doctrine/doctrine-cache-bundle      1.4.0   
doctrine/doctrine-fixtures-bundle   3.3.0   
doctrine/event-manager              1.1.0   
doctrine/inflector                  1.3.1   
doctrine/instantiator               1.3.0   
doctrine/lexer                      1.2.0   
doctrine/orm                        v2.7.0  
doctrine/persistence                1.2.0   
doctrine/reflection                 v1.0.0  
symfony/doctrine-bridge             v3.4.35 
</code></pre>

<p>I may have installed some of these packages manually, but who knows.</p>

<h2 id="enable-doctrine-in-the-application">Enable Doctrine in the application</h2>

<p>The first sign I had no idea what I was doing was when I could not see
any of the Doctrine-related commands when I used <code>bin/console</code>. After
moaning on Twitter and asking some questions on Stack Overflow, I realized
it would not automatically find it. so I added a line to my <code>Kernel.php</code>
file so that the bundle would be available.</p>

<pre><code class="php">    public function registerBundles()
    {
        $bundles = [
            new FrameworkBundle(),
            new SensioFrameworkExtraBundle(),
            new MonologBundle(),
            new TwigBundle(),
            new SwiftmailerBundle(),
            new WouterJEloquentBundle(),
            new OneupFlysystemBundle(),
            new DoctrineBundle(),
        ];

        if ($this-&gt;getEnvironment() !== Environment::TYPE_PRODUCTION) {
            $bundles[] = new DebugBundle();
        }

        if ($this-&gt;getEnvironment() === Environment::TYPE_DEVELOPMENT) {
            $bundles[] = new WebServerBundle();
            $bundles[] = new WebProfilerBundle();
        }

        return $bundles;
    }
</code></pre>

<h2 id="making-repositories-available-as-a-service">Making repositories available as a service</h2>

<p>I had to update my `resources/config/services/services.yml' file with the following
new section to allow the app to find and inject all the repository files I was going
to create:</p>

<pre><code class="yaml"> OpenCFP\Domain\Repository\:
    public: true
    resource: '%kernel.project_dir%/src/Domain/Repository/*'
</code></pre>

<h2 id="configuration-files">Configuration Files</h2>

<p>To make Doctrine see the database connections, I had to modify the
following files:</p>

<pre><code class="bash">resources/config/config_development.yml
resources/config/config_testing.yml
resources/config/config_production.yml
</code></pre>

<p>adding in the following details (determined through trial-and-error and online searches for help)</p>

<pre><code class="yaml">doctrine:
  dbal:
    url: mysql://root:@127.0.0.1:3306/cfp
    default_table_options:
      charset: utm8mb4
      collate: utg8mb4_unicode_ci
  orm:
    auto_mapping: true
    auto_generate_proxy_classes: true
    mappings:
      OpenCFP\Domain\Entity:
        type: annotation
        dir: "%kernel.root_dir%/../src/Domain/Entity"
        prefix: OpenCFP\Domain\Entity
</code></pre>

<p>Early on I had my integration test suite failing to even run because it was complaining it
could not find the new repository I had created:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

/**
 * Copyright (c) 2013-2019 OpenCFP
 *
 * For the full copyright and license information, please view
 * the LICENSE file that was distributed with this source code.
 *
 * @see https://github.com/opencfp/opencfp
 */

namespace OpenCFP\Domain\Repository;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use OpenCFP\Domain\Entity\Airport;

final class AirportRepository
{
    /**
     * @var EntityRepository
     */
    private $repository;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this-&gt;repository = $entityManager-&gt;getRepository(Airport::class);
    }

    public function withCode(string $code): ?Airport
    {
        $airport = $this-&gt;repository-&gt;findOneByCode($code);

        if ($airport !== null) {
            return $airport;
        }

        return null;
    }
}

</code></pre>

<p>Here's the entity I created to go with it</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

/**
 * Copyright (c) 2013-2019 OpenCFP
 *
 * For the full copyright and license information, please view
 * the LICENSE file that was distributed with this source code.
 *
 * @see https://github.com/opencfp/opencfp
 */

namespace OpenCFP\Domain\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\Table(name="airports")
 */
final class Airport
{
    /**
     * @ORM\Column(type="string", length=3)
     * @ORM\Id
     */
    private $code;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $name;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $country;

    /**
     * @return mixed
     */
    public function getCode()
    {
        return $this-&gt;code;
    }

    /**
     * @return mixed
     */
    public function getName()
    {
        return $this-&gt;name;
    }

    /**
     * @return mixed
     */
    public function getCountry()
    {
        return $this-&gt;country;
    }
}
</code></pre>

<p>The issue turned out to be I needed to set <code>auto_generate_proxy_classes</code> to be <code>true</code>. The
error messages from the application itself were not helpful (complaining it could not inject
the <code>EntityManagerInterface</code> my code was using). Anyway, once I figured that out my integration
test suite passed. Now I could go and modify my code to use the new repository instead of the
Eloquent model.</p>

<p>Here's a summary of the steps I took to update the action that uses airport details</p>

<ul>
<li>removed references to the <code>AirportInformationDatabase</code> object that was used to access the list of airports and codes</li>
<li>added in the use of the new <code>AirportRepository</code> object</li>
<li>updated the constructor for the action to accept <code>AirportRepository</code> as a parameter via the magic of autowiring dependencies</li>
<li>updated the code to use the new repository (and fix a code smell involving an exception being caught but never reacted to)</li>
</ul>

<p>So now my tests pass and I have a way to add more Doctrine entities and repositories going forward.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Mocking a function with different return values in Python]]></title>
            <link href="/atthekeyboard/2019/05/15/python-mocking-function-with-different-return-values/"/>
            <updated>2019-05-15T00:00:00+00:00</updated>
            <id>/atthekeyboard/2019/05/15/python-mocking-function-with-different-return-values/</id>
            <content type="html"><![CDATA[<p>For the first half of 2019 I was borrowed by the Performance Team
at Mozilla and asked to help them implement a way to measure the
performance of various browsers on Android platforms. This has
involved me getting familiar with several tools and environments
that I had not touched before:</p>

<ul>
<li>Mozilla's tooling for use with <a href="https://hg.mozilla.org/mozilla-central">mozilla-central</a></li>
<li>Rooting Android devices for testing purposes</li>
<li><a href="https://developer.android.com/studio/">Android Studio</a> and it's device emulation tools</li>
<li>Executing and parsing shell commands</li>
</ul>

<p>Of course, I am using <a href="https://docs.pytest.org/en/latest/">pytest</a> as well to make sure
that I had thought about testing scenarios and giving whomever
supports this code once I am back at my previous role a chance
to figure out what is going on.</p>

<p>One of the testing scenarios I came up with was handing the fact that I
had designed the code to have a fallback mode in case the
shell command I was using did not work on that particular
device. Some code reviews from other developers revealed
some differences in how the <a href="https://www.unixtutorial.org/commands/top"><code>top</code> command</a>
works on different phones.</p>

<p>So, drawing  on my own experiences with using test
doubles in PHP, I asked myself "how can I create
a mock that has different return values?". In
pytest this functionality is called <code>side_effect</code>.</p>

<p>So, here is some of the code in question that I needed
to test:</p>

<pre><code class="python">try:
    cpuinfo = raptor.device.shell_output("top -O %CPU -n 1").split("\n")
    raptor.device._verbose = verbose
    for line in cpuinfo:
    data = line.split()
            if data[-1] == app_name:
                cpu_usage = data[3]
except Exception:
    cpuinfo = raptor.device.shell_output("dumpsys cpuinfo | grep %s" % app_name).split("\n")
    for line in cpuinfo:
        data = line.split()
        cpu_usage = data[0].strip('%')
</code></pre>

<p>I wrapped the first call in a try-catch construct because
an exception is thrown if anything is up with that <code>top</code>
call. If that call doesn't work, I then want to use that
<code>dumpsys</code> call.</p>

<p>In the test itself, I would need the <code>shell_output</code> call
to first throw an exception (as expected for the scenario)
and then return some output that I can then parse and use.</p>

<p>In the PHP world, most test doubling tools allow you to
create a mock and have it return different values on
consecutive calls. Pytest is no different, but it took
me a while to figure out the correct search terms to find
the functionality I wanted.</p>

<p>So, here is how I did it:</p>

<pre><code class="python">def test_usage_with_fallback():
    with mock.patch('mozdevice.adb.ADBDevice') as device:
        with mock.patch('raptor.raptor.RaptorControlServer') as control_server:
            '''
            First we have to return an error for 'top'
            Then we return what we would get for 'dumpsys'
            '''
            device.shell_output.side_effect = [
                OSError('top failed, move on'),
                ' 34% 14781/org.mozilla.geckoview_example: 26% user + 7.5% kernel'
            ]
            device._verbose = True

            # Create a control server
            control_server.cpu_test = True
            control_server.test_name = 'cpuunittest'
            control_server.device = device
            control_server.app_name = 'org.mozilla.geckoview_example'
            raptor = Raptor('geckoview', 'org.mozilla.geckoview_example', cpu_test=True)
            raptor.device = device
            raptor.config['cpu_test'] = True
            raptor.control_server = control_server

            # Verify the response contains our expected CPU % of 34
            cpuinfo_data = {
                u'type': u'cpu',
                u'test': u'usage_with_fallback',
                u'unit': u'%',
                u'values': {
                    u'browser_cpu_usage': '34'
                }
            }
            cpu.generate_android_cpu_profile(
                raptor,
                "usage_with_fallback")
            control_server.submit_supporting_data.assert_called_once_with(cpuinfo_data)
</code></pre>

<p>Let me break down what I did (as always, I am open to
suggestions on better ways to write this test).</p>

<p>The first double is for a class that communicates with the
Android device. Then the next double I needed was for the
"control server", which is what is used to control the
browser and execute tests.</p>

<p>My first "side effect" is to generate an error so it
triggers the first condition of the scenario that
'top should not work'. The second "side effect" is
the response I am expecting to get from the shell
command in my fallback area of the code.</p>

<p>Then I continue with the "arrange" part of the <a href="http://wiki.c2.com/?ArrangeActAssert">Arrange-Act-Assert</a>
testing pattern I like to use -- I configure my
"control server" to be the way I want it.</p>

<p>I finish up with creating what I expect the data
that is to be submitted to our internal systems
looks like.</p>

<p>I execute the code I am testing (the "act" part)
and then use a <a href="https://github.com/testdouble/contributing-tests/wiki/spy">spy</a>
to make sure the control server would have submitted
the data I was expecting to have been generated.</p>

<p>The ability to have a method return different values
is powerful in the context of writing tests for code
that has conditional behaviour. I hope you find this
example useful!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Mocking a function with different return values in Python]]></title>
            <link href="/atthekeyboard/2019/05/15/getting-things-done-while-remote/"/>
            <updated>2019-05-15T00:00:00+00:00</updated>
            <id>/atthekeyboard/2019/05/15/getting-things-done-while-remote/</id>
            <content type="html"><![CDATA[<p>For the first half of 2019 I was borrowed by the Performance Team
at Mozilla and asked to help them implement a way to measure the
performance of various browsers on Android platforms. This has
involved me getting familiar with several tools and environments
that I had not touched before:</p>

<ul>
<li>Mozilla's tooling for use with <a href="https://hg.mozilla.org/mozilla-central">mozilla-central</a></li>
<li>Rooting Android devices for testing purposes</li>
<li><a href="https://developer.android.com/studio/">Android Studio</a> and it's device emulation tools</li>
<li>Executing and parsing shell commands</li>
</ul>

<p>Of course, I am using <a href="https://docs.pytest.org/en/latest/">pytest</a> as well to make sure
that I had thought about testing scenarios and giving whomever
supports this code once I am back at my previous role a chance
to figure out what is going on.</p>

<p>One of the testing scenarios I came up with was handing the fact that I
had designed the code to have a fallback mode in case the
shell command I was using did not work on that particular
device. Some code reviews from other developers revealed
some differences in how the <a href="https://www.unixtutorial.org/commands/top"><code>top</code> command</a>
works on different phones.</p>

<p>So, drawing  on my own experiences with using test
doubles in PHP, I asked myself "how can I create
a mock that has different return values?". In
pytest this functionality is called <code>side_effect</code>.</p>

<p>So, here is some of the code in question that I needed
to test:</p>

<pre><code class="python">try:
    cpuinfo = raptor.device.shell_output("top -O %CPU -n 1").split("\n")
    raptor.device._verbose = verbose
    for line in cpuinfo:
    data = line.split()
            if data[-1] == app_name:
                cpu_usage = data[3]
except Exception:
    cpuinfo = raptor.device.shell_output("dumpsys cpuinfo | grep %s" % app_name).split("\n")
    for line in cpuinfo:
        data = line.split()
        cpu_usage = data[0].strip('%')
</code></pre>

<p>I wrapped the first call in a try-catch construct because
an exception is thrown if anything is up with that <code>top</code>
call. If that call doesn't work, I then want to use that
<code>dumpsys</code> call.</p>

<p>In the test itself, I would need the <code>shell_output</code> call
to first throw an exception (as expected for the scenario)
and then return some output that I can then parse and use.</p>

<p>In the PHP world, most test doubling tools allow you to
create a mock and have it return different values on
consecutive calls. Pytest is no different, but it took
me a while to figure out the correct search terms to find
the functionality I wanted.</p>

<p>So, here is how I did it:</p>

<pre><code class="python">def test_usage_with_fallback():
    with mock.patch('mozdevice.adb.ADBDevice') as device:
        with mock.patch('raptor.raptor.RaptorControlServer') as control_server:
            '''
            First we have to return an error for 'top'
            Then we return what we would get for 'dumpsys'
            '''
            device.shell_output.side_effect = [
                OSError('top failed, move on'),
                ' 34% 14781/org.mozilla.geckoview_example: 26% user + 7.5% kernel'
            ]
            device._verbose = True

            # Create a control server
            control_server.cpu_test = True
            control_server.test_name = 'cpuunittest'
            control_server.device = device
            control_server.app_name = 'org.mozilla.geckoview_example'
            raptor = Raptor('geckoview', 'org.mozilla.geckoview_example', cpu_test=True)
            raptor.device = device
            raptor.config['cpu_test'] = True
            raptor.control_server = control_server

            # Verify the response contains our expected CPU % of 34
            cpuinfo_data = {
                u'type': u'cpu',
                u'test': u'usage_with_fallback',
                u'unit': u'%',
                u'values': {
                    u'browser_cpu_usage': '34'
                }
            }
            cpu.generate_android_cpu_profile(
                raptor,
                "usage_with_fallback")
            control_server.submit_supporting_data.assert_called_once_with(cpuinfo_data)
</code></pre>

<p>Let me break down what I did (as always, I am open to
suggestions on better ways to write this test).</p>

<p>The first double is for a class that communicates with the
Android device. Then the next double I needed was for the
"control server", which is what is used to control the
browser and execute tests.</p>

<p>My first "side effect" is to generate an error so it
triggers the first condition of the scenario that
'top should not work'. The second "side effect" is
the response I am expecting to get from the shell
command in my fallback area of the code.</p>

<p>Then I continue with the "arrange" part of the <a href="http://wiki.c2.com/?ArrangeActAssert">Arrange-Act-Assert</a>
testing pattern I like to use -- I configure my
"control server" to be the way I want it.</p>

<p>I finish up with creating what I expect the data
that is to be submitted to our internal systems
looks like.</p>

<p>I execute the code I am testing (the "act" part)
and then use a <a href="https://github.com/testdouble/contributing-tests/wiki/spy">spy</a>
to make sure the control server would have submitted
the data I was expecting to have been generated.</p>

<p>The ability to have a method return different values
is powerful in the context of writing tests for code
that has conditional behaviour. I hope you find this
example useful!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Watch me get grumpy - event sourcing refactor]]></title>
            <link href="/atthekeyboard/2019/04/27/watch-me-get-grumpy-event-sourcing-refactor/"/>
            <updated>2019-04-27T00:00:00+00:00</updated>
            <id>/atthekeyboard/2019/04/27/watch-me-get-grumpy-event-sourcing-refactor/</id>
            <content type="html"><![CDATA[<p>As I continue to build out <a href="https://opencfpcentral.com">OpenCFP Central</a> I
wanted to share with you some of the work I have been doing to move it from
your typical <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>
structure to something a little more robust -- <a href="https://www.martinfowler.com/bliki/CQRS.html">CQRS</a>
and <a href="https://www.martinfowler.com/eaaDev/EventSourcing.html">event sourcing</a>.</p>

<p>So at the time I wrote this, I had two problems I needed to solve:</p>

<ul>
<li>how to refactor existing code for talk creation to support CQRS+ES</li>
<li>how to go back and create events for data that already exists</li>
</ul>

<p>Solving the first problem appears straightforward. This is a <a href="https://laravel.com/docs/5.8">Laravel 5.8</a>
application, so I spent time looking at some different packages that I thought
could help me implement the core features that I needed for event sourcing
quickly. My first research lead me to two solutions tailored towards PHP:</p>

<ul>
<li><a href="http://getprooph.org/">Prooph</a></li>
<li><a href="https://eventsauce.io/docs/">EventSauce</a></li>
</ul>

<p>The problem I quickly ran into was there was some friction in using
these packages with Laravel. They both are very powerful, but you will
end up spending a lot of time writing the wiring and/or glue yourself.
That was time that I felt I did not have. After all OpenCFP Central
is a project I can only really devote 1-2 days a week on. I needed
some help to implement the basic concepts and let me build stuff
quickly.</p>

<p>Like with a lot of problems I try and solve over the years, sometimes
if you wait long enough someone else will create the solution for you!</p>

<p>I discovered that <a href="https://twitter.com/freekmurze">Freek Murze</a> had been
tweeting about <a href="https://docs.spatie.be/laravel-event-projector/v2/introduction">Laravel Event Projector</a>.
This turned out to be exactly what I needed to get started.</p>

<p>So, I need to go backwards and first figure out how do I take the
existing data we have and create events from it. The work I needed
to do will be used when I go and refactor the existing user registration
code to support the new event sourcing.</p>

<p>What do I need to start?</p>

<ul>
<li>An <a href="https://docs.spatie.be/laravel-event-projector/v2/getting-familiar-with-event-sourcing/using-aggregates-to-make-decisions-based-on-the-past">aggregate</a> that represents a talk</li>
<li>An event that needs to be triggered to create our talk aggregate</li>
<li>A script that reads in the existing data and creates those events.</li>
</ul>

<p>The aggregate looks like this:</p>

<pre><code class="php">declare(strict_types=1);

namespace App\Domain\User;

use App\Domain\User\Events\UserCreated;
use Spatie\EventProjector\AggregateRoot;

final class UserAggregateRoot extends AggregateRoot
{
    public function createUser(string $email, string $name, string $password)
    {
        $this-&gt;recordThat(new UserCreated($email, $name, $password));

        return $this;
    }
}
</code></pre>

<p>Remember, all I'm storing is the data about this user that is
important to the system. It will automatically create a UUID that
belongs to this aggregate. I'll worry about what ends up in the
database we will <em>read</em> information from when I create a 
<a href="https://docs.spatie.be/laravel-event-projector/v2/getting-familiar-with-event-sourcing/using-projectors-to-transform-events">projector</a>
to extract data from the event store.</p>

<p>Next, I have to create the code for the event that will
in turn generate our user aggregate.</p>

<pre><code class="php">declare(strict_types=1);

namespace App\Domain\User\Events;

use Spatie\EventProjector\ShouldBeStored;

final class UserCreated implements ShouldBeStored
{
    /** @var string */
    public $email;

    /** @var string */
    public $name;

    /** @var string */
    public $password;

    /**
     * UserCreated constructor.
     * @param string $email
     * @param string $name
     * @param string $password
     */
    public function __construct(string $email, string $name, string $password)
    {
        $this-&gt;email    = $email;
        $this-&gt;name     = $name;
        $this-&gt;password = $password;
    }
}
</code></pre>

<p>It takes the user information passed into it and assigns it to
class attributes.</p>

<p>Finally, I will create a console command that I can execute
with <code>php artisan</code> that will loop through all my existing
user records, storing aggregates for them.</p>

<pre><code class="php"><br />declare(strict_types=1);

namespace App\Console\Commands;

use App\Domain\User\UserAggregateRoot;
use App\User;
use Illuminate\Console\Command;
use Ramsey\Uuid\Uuid;

class GenerateUserCreatedEvents extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'admin:generate_user_events';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Set an existing user to be an admin';

    public function handle() : void
    {
        foreach (User::all() as $user) {
            UserAggregateRoot::retrieve((string) Uuid::uuid4())
                -&gt;createUser(
                    $user-&gt;email,
                    $user-&gt;name,
                    $user-&gt;password
                )
                -&gt;persist();
        }
    }
}
</code></pre>

<p>The <code>UserAggregateRoot</code> uses some magic behind the scenes to
then take the data I submitted and write it to the event store.</p>

<p>So what ends up being stored in the events table? In my current
test environment I have exactly one user and here's a
slightly-edited version of what got created.</p>

<pre><code>id               | 4
aggregate_uuid   | 2b5f88da-1f51-4443-a080-c566c04d452e
event_class      | App\Domain\User\Events\UserCreated
event_properties | {"email":"chartjes@grumpy-learning.com","name":"Chris Hartjes","password":"clearlynotmypassword"}
meta_data        | []
created_at       | 2019-04-26 19:31:44
</code></pre>

<p>Again, I remind you to understand the central concept
that we are creating events that do not necessarily map
exactly to what ends up in a database. One of the central
parts of CQRS is that by separating the "command" (typically
writing something to a database) from the "query" (typically
reading something from a database). This gives me the
flexibility to have multiple database tables that can
display information in different ways. This is especially
useful for domains where multiple types of reports are
required. Multiple tables with exactly the data you need
are, in my opinion, better than one big table where you
have to create customized queries to filter out, and group,
and aggregate things you are looking for.</p>

<p>First, I need to modify the controller method that
handles user creation to create an aggregate instead
of directly writing to the database.</p>

<p>Here's what it looks like right now:</p>

<pre><code class="php">/**
* Create a new user instance after a valid registration.
*
* @param  array  $data
* @return \App\User
*/
protected function create(array $data) : User
{
    return User::create([
        'name' =&gt; $data['name'],
        'email' =&gt; $data['email'],
        'password' =&gt; Hash::make($data['password']),
    ]);
}
</code></pre>

<p>Here's what it does instead:</p>

<pre><code class="php">protected function create(array $data) : User
{
    $newUuid = (string) Uuid::uuid4();
        UserAggregateRoot::retrieve($newUuid)
            -&gt;createUser(
                $data['email'],
                $data['name'],
                Hash::make($data['password'])
            )
            -&gt;persist();

        return User::where('email', $data['email'])-&gt;first();
}
</code></pre>

<p>Now, this is not exactly normal behaviour in a CQRS+ES
application. Because Laravel's Auth system was not created
with this is in mind, I had to cheat a little to make
the use registration system behave correctly.</p>

<p>Next I need to create a projector that will be triggered
whenever the <code>UserCreated</code> event happens.</p>

<pre><code class="php">declare(strict_types=1);

namespace App\Domain\User\Projectors;

use App\Domain\User\Events\UserCreated;
use App\User;
use Spatie\EventProjector\Projectors\Projector;
use Spatie\EventProjector\Projectors\ProjectsEvents;

final class UserProjector implements Projector
{
    use ProjectsEvents;

    public function onUserCreated(UserCreated $event, $aggregateUuid) : void
    {
        User::create([
            'name' =&gt; $event-&gt;name,
            'email' =&gt; $event-&gt;email,
        'password' =&gt; $event-&gt;password
        ]);
    }
}
</code></pre>

<p>Alert readers will notice this is what the old controller method
used to do.</p>

<p>Any projectors you write will be automatically detected and
registered by the application.</p>

<p>So there you have it! A successful refactor of some existing
code to support a new underlying paradigm. There is still
more work to do and I'll share some of it in another blog post
soon.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Watch Me Get Grumpy -- Zend Expressive Doctrine Configuration]]></title>
            <link href="/atthekeyboard/2019/03/17/zend-expressive-doctrine-configuration/"/>
            <updated>2019-03-17T00:00:00+00:00</updated>
            <id>/atthekeyboard/2019/03/17/zend-expressive-doctrine-configuration/</id>
            <content type="html"><![CDATA[<p>I am in the process of starting the dreaded Rewrite Of An Existing Application
That Works. In this case, it is time that I turned <a href="https://github.com/opencfp/opencfp">OpenCFP</a>
from a install-it-yourself web application into a Software-As-A-Service offering.</p>

<p>As part of this rewrite I have decided to use <a href="https://www.martinfowler.com/bliki/CQRS.html">CQRS</a>
and <a href="https://www.martinfowler.com/eaaDev/EventSourcing.html">Event Sourcing</a> instead
of the traditional CRUD-backed-with-a-DB architecture that most of the
web is built on.</p>

<p>I believe that an application that has so many domain-specific events associated
with it will benefit greatly from the ideas underpinning CQRS and Event Sourcing.
Anyway, the architecture is not up for debate since I'm the one doing it!</p>

<p>This app is going to replace what I already created at <a href="https://opencfp-central.com">OpenCFP Central</a>
and I will cut over to this new one once I have implemented the two existing
features:</p>

<ul>
<li>allowing people to register accounts</li>
<li>allowing people who are running OpenCFP to use OpenCFP Central for single-sign-on</li>
</ul>

<p>Because there is so much reworking to be done with the OpenCFP code base to make it
a SaaS capable of hosting multiple events, I felt it was better to start fresh
with the code base. Especially because I now need to add all the CQRS+ES implementation.</p>

<p>The existing version of the application is a standard CRUD-backed-with-a-DB that was
built using <a href="https://laravel.com">Laravel</a>. My research into figuring out how to
add CQRS+ES led me to believe that I did not have the requisite knowledge of the
framework to figure out how to make it work. Laravel is great in that it has lots
of packages and add-ons to allow you to quickly build something. I felt like this
was not going to help me in this case. Laravel is good! But not a great fit for
someone with my level of expertise with it.</p>

<p>So I decided to use <a href="https://zendframework.github.io/zend-expressive/">Zend Expressive</a>
as the framework to build this app. My online network of friends includes many 
people who have used the framework, and one of the best and most thorough examples
of how to build an application using CQRS+ES was done by <a href="https://twitter.com/ocramius">Marco Pivetta</a>
and it was backed by Zend Framework and uses <a href="http://getprooph.org/">Prooph</a> for
CQRS+ES functionality.</p>

<p>(As an aside, using Zend Expressive has reminded me how much I have relied
on 'batteries included' frameworks in recent years. Forcing myself to also
write glue code is actually a good thing for me)</p>

<p>So, I knew the framework, I knew what I could use for CQRS+ES. Now it was time
to install some other tools to help me build out this version of OpenCFP.</p>

<p>I was going to require some sort of tool to create database migrations
as the app gets built. I was also learning towards trying not to use
an ORM but instead something like <a href="https://www.doctrine-project.org/projects/dbal.html">Doctrine DBAL</a>
so I decided to also use <a href="https://www.doctrine-project.org/projects/migrations.html">Doctrine Migrations</a>
since it can be used with our without the ORM.</p>

<p>I found some great examples of how to set things up...and it just
wouldn't work for me. The steps seemed straightforward and I highly
recommend watching Adam Culp's Beachcasts tutorial on <a href="https://www.youtube.com/watch?v=pFvh5ZNhdOQ">configuring Doctrine ORM and DBAL</a>. I had my database configured and working.
I added in the code to allow the Zend Service manager to locate
Doctrine as required. The examples said "this should work just
fine with DBAL." 
I had the 'migrations.php' and 'migrations-db.php' file and it Just
Wouldn't Work.</p>

<p>Until I realized the key critical thing I had hand-waved and did not
think anything off -- environment variables.</p>

<p>The app is going to be deployed to Heroku, where I can set environment
variables that can be accessed by code, both in a CLI and web environment.
I use environment variables in my work at <a href="https://mozilla.com">the day job</a>
so why wouldn't I do that here?</p>

<p>This is what my 'migrations-db.php' file looked like:</p>

<pre><code class="php">&lt;?php
declare(strict_types=1);

return [
    'driver' =&gt; 'pdo_pgsql',
    'dbname' =&gt; \getenv('DB_DATABASE'),
    'user' =&gt; \getenv('DB_USER'),
    'password' =&gt; \getenv('DB_PASSWORD'),
    'host' =&gt; \getenv('DB_HOST')
];
</code></pre>

<p>When I would run the migration tool it would spit out errors telling me
it could not read the database configuration file and a bunch of other
noise that just made me grumpier and grumpier as I struggled to figure
out what was wrong.</p>

<p>Eventually I decided to see what as actually inside those environment
variables. To my surprise there were empty! Ugh. But I did know what
I could do to fix it. I would make use of Vance Lucas' <a href="https://github.com/vlucas/phpdotenv">dotenv</a>
tool to make sure the contents of my own '.env' file would be
available.</p>

<p>After installing it using <a href="https://getcomposer.org">Composer</a> as per
the documentation, I added this code to my 'migrations-db.php' file:</p>

<pre><code class="php">use Dotenv\Dotenv;

if (file_exists(__DIR__ . '/.env')) {
    $dotenv = Dotenv::create(__DIR__);
    $dotenv-&gt;load();
}
</code></pre>

<p>Now the migrations tool worked just fine, and I was on my way towards
the first step of the app -- building the user registration system
and making sure authentication worked correctly.</p>

<p>If you have any comments or suggestions, please reach out to me via
Twitter (my preferred way) or you can email me at chartjes@grumpy-learning.com.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker as a testing tool]]></title>
            <link href="/atthekeyboard/2019/01/31/docker-as-a-testing-tool/"/>
            <updated>2019-01-31T00:00:00+00:00</updated>
            <id>/atthekeyboard/2019/01/31/docker-as-a-testing-tool/</id>
            <content type="html"><![CDATA[<p>Yes, <a href="https://docker.com">Docker</a> can be used as a tool to help
you out with some testing problems. Let me show an example of
how it makes some load testing easier.</p>

<p>One of the projects I support at <a href="https://mozilla.com">Mozilla</a> is
the push notification service that we run. Among the tests that
I do for them is a load test using an <a href="https://github.com/mozilla-services/autopush-loadtester">internal tool</a> 
that the developers of the service created. It is a <a href="https://twistedmatrix.com/trac/">Twisted</a> application that runs using <a href="https://pypy.org">PyPy</a>.</p>

<p>No, I do not know why they made those choices. Further more, it
doesn't matter because I have to use it so I roll with the weirdness.</p>

<p>Installing it locally on my MacBook Pro was straightforward --
the docs even cover expected weirdness with some support libraries.
But now that I have switched over to using Windows at work I
ran into some difficulties getting all the dependencies installed
in <a href="https://docs.microsoft.com/en-us/windows/wsl/about">Windows Subsystem for Linux</a>.</p>

<p>In fact, one of the developers uses Windows...and told me of
the experience he had at failing to get it to work. "I just use
VMWare Player and an Ubuntu VM".</p>

<p>I tried to get that working...and ran into a bunch of issues
where I had to disable something called "Windows Defender Credential Guard". Which bugged me because I like to keep security mechanisms in place
normally. I followed instructions FROM MICROSOFT on how to do it
and VMWare Player still wouldn't run. Kept giving me the same
error.</p>

<p>Okay, on to plan B -- Docker.</p>

<p>The first question was "how do I make this work?". I theorized
I needed to do something like this:</p>

<ul>
<li>find a base container of Ubuntu 18</li>
<li>get inside a running version of that image</li>
<li>install all the required dependencies</li>
<li>verify that the load testing tool works</li>
<li>make a copy of that container</li>
<li>push that copy up to Docker hub for teammates to use</li>
</ul>

<p>Some searching revealed that I could get a running Ubuntu
container and connect with it:</p>

<pre><code>docker run --rm --it ubuntu
</code></pre>

<p>This downloaded the image and gave me access to it via
a <a href="https://www.gnu.org/software/bash/">Bash</a> shell.</p>

<p>With that shell, I started installing all the packages
I would need to install the load testing tool, including
adding the package repository for PyPy so I could install
it with the package manager.</p>

<p>Once I got all the dependencies installed, I made sure that
the tests could run. I even found out that there was a bug
in the documenation. ;)</p>

<p>With a Docker image that had a working installation of the
load testing tool, the next step turned out to be more
straight forward than I had thought.</p>

<p>The Docker feature I needed was called snapshots. Here is
what I did.</p>

<p>With the Docker container still running, I opened up
another shell (in this case I am using <a href="https://docs.microsoft.com/en-us/powershell/">Powershell</a>) and used the command <code>docker ps</code>
to get the name that had been assigned by Docker to my
running container.</p>

<p>With that name I used the following command to save
a version of that container:</p>

<pre><code>docker commit name_of_container ubuntu:ap-loadtester 
</code></pre>

<p>Then I tagged the container so I can push up to Docker
hub under my account:</p>

<pre><code>docker tag ubuntu:ap-loadtester chartjes/ap-loadtester
</code></pre>

<p>Last, I pushed it up to Doker hub</p>

<pre><code>docker push chartjes/ap-loadtester
</code></pre>

<p>So now I have:</p>

<ul>
<li>an Ubuntu container I can share</li>
<li>that has all the dependencies installed</li>
<li>can be used by teammates to load test the push service</li>
</ul>

<p>Again, I emphasize that a tester with some programming
experience can create some really useful testing tools
by leveraging the same tools and environments used to
build whatever you are testing.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Learn To Test Like A Grumpy Programmer - Part 2]]></title>
            <link href="/atthekeyboard/2019/01/16/test-like-a-grumpyprogrammer-part-2/"/>
            <updated>2019-01-16T00:00:00+00:00</updated>
            <id>/atthekeyboard/2019/01/16/test-like-a-grumpyprogrammer-part-2/</id>
            <content type="html"><![CDATA[<p>(If you use PHP, you can learn how to write automated tests for your code via my <a href="https://leanpub.com/c/learntotest">"Learn To Test Like A Grumpy Programmer" course</a> over at LeanPub)</p>

<p>In this blog post I wanted to talk about some of the lessons I've
learned at the <a href="https://mozilla.com">day job</a> about how to use tools and techniques
we are familiar with in the developer world to make our job of
testing things easier.</p>

<h2 id="mozilla%27s-push-notification-service">Mozilla's Push Notification Service</h2>

<p>One of the projects I do QA work for is the <a href="https://support.mozilla.org/en-US/kb/push-notifications-firefox">push notification service</a>
that Mozilla runs. Yes, I know a lot of people get supremely annoyed
by push notifications. Yes, they are heavily abused by people. Mozilla
tries to use them in a way not designed to annoy you. But this is the
Internet after all, where everything annoys somebody somehow.</p>

<p>My work for that team involves doing testing of the service whenever
a new version is ready to be released. The process goes like this:</p>

<ul>
<li>the development team tags a new release along with a <a href="https://en.wikipedia.org/wiki/Changelog">changelog</a></li>
<li>the operations team deploys this new release to the staging environment</li>
<li>I create a <a href="https://bugzilla.mozilla.org/">BugZilla</a> ticket to track the deployment and testing results</li>
<li>I run a series of tests against the service on staging, recording my progress there</li>
</ul>

<p>If all my tests pass on staging, I give approval to deploy that version
of the service to production. The process for that is:</p>

<ul>
<li>the operations team deploys the new release to production</li>
<li>I create another ticket to track the deployment process and testing results</li>
<li>I run the same tests and add an additional set of load tests to make sure the service is responsive</li>
</ul>

<p>So what tests do I run?</p>

<h2 id="api-contract-tests">API Contract Tests</h2>

<p>I wrote some tests using <a href="https://pytest.org">pytest</a> that make API
calls using known values and verify that we are getting the responses
that we expect.</p>

<p>These tests usually are not difficult to write and I did experiment
with making them asynchronous using <a href="https://github.com/pytest-dev/pytest-asyncio">pytest-asyncio</a>
so I could learn how asynchronous code works in Python. If you had
a very large test suite, I could see it being useful to speed up the
process. This particular test suite is not big enough to warrant that.</p>

<p>For my fellow PHP folks, there are some plugins for <a href="https://phpunit.de">PHPUnit</a>
that can run your tests in parallel. For one example check out <a href="https://github.com/jwage/phpchunkit">PHPChunkit</a></p>

<h2 id="load-tests">Load Tests</h2>

<p>I only run the load tests on the production version of the service because
the number of nodes that handle push notification requests is higher in
production. These tests are designed to put some non-trivial load onto
the system and examine the output from the nodes for any error messages.</p>

<h2 id="vapid-testing">VAPID Testing</h2>

<p>I use two different Android devices for these tests. Each device has
latest stable and nightly releases of Firefox on them. One device
is configured to point at staging, the other at production.</p>

<p>A web page is loaded that uses Javascript to generate <a href="https://blog.mozilla.org/services/2016/08/23/sending-vapid-identified-webpush-notifications-via-mozillas-push-service/">VAPID-based notifications</a>.</p>

<p>In the summer of 2018 I did experiment with seeing if I could automate
these tests so I could use an online service offering cloud-accessible
Android images. I did make some progress but it seems like some of the
pieces needed to do things like make sure I don't have to click on the
browser to accept notifications are either really brittle or don't exist,
depending on what automation tools you are using.</p>

<h2 id="desktop-notification-tests">Desktop Notification Tests</h2>

<p>The person who did this testing work before me created a Nodejs app that
serves up an web page with some forms and buttons on them. You fill in
some values and it creates a series of push notifications that you
visually verify work. He then put it inside a Docker container to make
it easier for others to run those tests.</p>

<p>This test used to be on a personal web page of a (now-former) Mozilla
employee.</p>

<h2 id="desktop-webpush-tests">Desktop WebPush Tests</h2>

<p>These tests are to make sure that a feature of the service where you
can group WebPush messages together by topic, only displaying the last one,
works correctly.</p>

<p>The process for these tests are:</p>

<ul>
<li>checkout a <a href="https://github.com/jrconlin/topics">GitHub repo</a> that contains the test</li>
<li>configure everything according to the documenation</li>
<li>start up the "topic server" via the CLI, which is serving up a one-page <a href="https://cyclone.io">Cyclone</a> web application</li>
<li>click on a button fire up a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">service worker</a> that receives requests to send a WebPush notification</li>
<li>then use another CLI tool to fire off notifications (with or without a topic)</li>
<li>visually verify that the notifications appeared</li>
</ul>

<p>Given that I already had a Docker-based solution, I decided it was time
to turn this test into something where I only have to click a few buttons
instead of running things via the CLI.</p>

<p>The first step was to update the existing one page app to have two more
buttons. So I edited the HTML to add some buttons and then added some
JavaScript that made calls to two new URL's for the app.</p>

<p>I then added those two URL's to the Cyclone app, porting over code from
the CLI "topic pusher" tool to generate the notifications.</p>

<p>There was already a Dockerfile for the application, so I used that and
then spent some time building and rebuilding and debugging the application
to make sure it did actually make it so all I had to do was the following:</p>

<ul>
<li>download the Docker image</li>
<li>start running the image (making sure to tell Docker to forward the correct port)</li>
<li>click on the Subscribe button and see the message that the service worker is running and the browser asks to accept notifications</li>
<li>click on the button that sends a single notification and visually verify output</li>
<li>click on the button that sends multiple notifications grouped by topic and visually verify output</li>
</ul>

<p>So now I have a test that I can point other folks to that they can
use without having to install any dependencies in their local environment
other than a web browser and Docker.</p>

<h2 id="programming-skills-%2B-qa-work-%3D%3D-solving-interesting-problems">Programming Skills + QA work == Solving Interesting Problems</h2>

<p>I am far from the only person who has this skill set. But having
some ability to create your own purpose-specific tools means
that the people around you get to benefit.</p>

<p>Often the tools (and automation solutions) that folks use to
test things are proprietary and not open to be modified. So
you expend a lot of energy trying to bend a tool towards a
new purpose.</p>

<p>There are other folks out there like me who busy creating wrappers
around hard-to-use tools or creating new solutions with the
goal of making what used to be difficult a lot easier. Encourage
those people and promote what they are doing!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Learn To Test Like A Grumpy Programmer - Part 1]]></title>
            <link href="/atthekeyboard/2018/12/18/test-like-a-grumpy-programmer-part-1/"/>
            <updated>2018-12-18T00:00:00+00:00</updated>
            <id>/atthekeyboard/2018/12/18/test-like-a-grumpy-programmer-part-1/</id>
            <content type="html"><![CDATA[<p>(You can see more stuff like this blog post if you buy my <a href="https://leanpub.com/c/learntotest">"Learn To Test Like A Grumpy Programmer" course</a> over at LeanPub)</p>

<p>I wanted to show folks how someone who has been writing tests for PHP in anger
since 2003 actually implements new features for a web site, driving them with
tests.</p>

<p>More importantly, I want you to focus on how deliberate and methodical I am
in doing this work. I know it's an overused word, but discipline is a key
factor in successfully using a TDD approach for your tests. Skipping steps or
taking short cuts is a great way to end up with weird errors that you spend
a very long time debugging.</p>

<p>I am building [OpenCFP Central])(https://opencfpcentral.com), which is a companion
web application for <a href="https://github.com/opencfp/opencfp">OpenCFP</a>. OpenCFP is
a PHP web application that conference organizers can install and use to collect
talk submissions from prospective speakers.</p>

<p>OpenCFP Central is a 100% free service.</p>

<p>Right now you can register for an account with OpenCFP Central. For conference
organizers, you can obtain OAuth tokens so that people can use their OpenCFP Central
account to login and submit talk ideas to OpenCFP. This helps to reduce one of
the biggest complaints, which was "why do I have to keep creating OpenCFP accounts?!?"</p>

<p>The next feature I am building is allowing OpenCFP Central users to create talks and
store them there. Once I've built that out, then I will add functionality to OpenCFP
itself to retrieve a list of talks for a user who authenticated using OpenCFP Central
and allow one-click submission of the talk to that OpenCFP instance.</p>

<p>OpenCFP Central is being built using <a href="https://laravel.com">Laravel</a> starting with
version 5.7. This is my first Laravel app but so many of the concepts it presents
are not revolutionary or even unexpected for folks who have been doing web
development with these "front controller style" web application frameworks.</p>

<p>So, with all that out of the way, let me show you how I implemented the first
bit of functionality of the new feature: displaying an empty talk creation
form for an authenticated user.</p>

<p>I started with a test that assumed everything was working:</p>

<pre><code class="php">namespace Tests\Feature\Feature;

use App\User;
use Tests\TestCase;

class TalkPage extends TestCase
{
    /**
     * @test
     */
    public function it_displays_the_talk_form()
    {
        /**
         * As a logged-in user
         * When I follow the route for "click here to create a talk"
         * I should see the talk form being displayed
         */
        $user = Factory(User::class)-&gt;create();
        $response = $this-&gt;actingAs($user)
            -&gt;get(route('create_talk'));
        $response-&gt;assertStatus(200);
        $response-&gt;assertSeeText('Create A Talk');
        $response-&gt;assertSeeText('Title');
        $response-&gt;assertSeeText('Description');
        $response-&gt;assertSeeText('Other Details');
    }
}
</code></pre>

<p>Of course, it failed because I did not have the route created. So I went and
added this route to <code>routes/web.php</code></p>

<pre><code class="php">Route::get('/talk/create', 'TalkController@create')-&gt;name('create_talk');
</code></pre>

<p>Now the test fails because I don't have a TalkController. I used the <code>artisan</code>
CLI tool to create an empty TalkController and modified it to use the <code>auth</code>
middleware.</p>

<pre><code class="php">namespace App\Http\Controllers;

use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class TalkController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this-&gt;middleware('auth');
    }
}
</code></pre>

<p>The test fails because I do not have the expected method for <code>TalkController</code>
created yet. Let's add that in:</p>

<pre><code class="php">namespace App\Http\Controllers;

use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class TalkController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this-&gt;middleware('auth');
    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\View\View
     */
    public function create(): View
    {
    }
}
</code></pre>

<p>Test still failing (as expected) because it's not doing anything.
I'll add some code where I grab our authenticated user and ask
it to display a specific view.</p>

<pre><code class="php">&lt;?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class TalkController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this-&gt;middleware('auth');
    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\View\View
     */
    public function create(): View
    {
        $user = Auth::user();
        return view('talk.create')
            -&gt;with('user', Auth::user());
    }
}
</code></pre>

<p>Now the test fails because that view does not exist. I need to
create the appropriate directory structure to group views related
to talks and create a blank one that uses our existing layout.</p>

<pre><code class="php">@extends('layouts.app')

@section('content')
    &lt;div class="container"&gt;
        &lt;div class="row justify-content-center"&gt;
            &lt;div class="col-md-8"&gt;
                &lt;div class="card"&gt;
                    &lt;div class="card-header"&gt;Create A Talk&lt;/div&gt;
                    &lt;div class="card-body"&gt;
                        &lt;p&gt;
                            Use the form below to create a talk that can be submitted to OpenCFP instances that are
                            using OpenCFP Central
                        &lt;/p&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
@endsection
</code></pre>

<p>Test still fails because there is no form information in there. So I created
a partial view that contains the form fields I want. I did it without the
opening and closing form tags because I plan on reusing this form snippet
elsewhere. As part of a future test I need to modify this snippet to 
set default values as part of verifying you can actually succesfully
create or update a test. Sometimes it's okay to think a little bit ahead.
This strikes me as a very minor detail.</p>

<pre><code class="php">&lt;div class="form-group"&gt;
    &lt;label for="talk_title"&gt;Title&lt;/label&gt;
    &lt;input type="text" class="form-control" name="talk_title" /&gt;
&lt;/div&gt;
&lt;div class="form-group"&gt;
    &lt;label for="description"&gt;Description&lt;/label&gt;
    &lt;textarea class="form-control" name="talk_description"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div class="form-group"&gt;
    &lt;label for="other"&gt;Other Details&lt;/label&gt;
    &lt;textarea class="form-control" name="talk_other"&gt;&lt;/textarea&gt;
&lt;/div&gt;
</code></pre>

<p>Next I updated the main "create talk" view to use this form and wrapped
it form tags that POST the results to another method.</p>

<pre><code class="php">@extends('layouts.app')

@section('content')
    &lt;div class="container"&gt;
        &lt;div class="row justify-content-center"&gt;
            &lt;div class="col-md-8"&gt;
                &lt;div class="card"&gt;
                    &lt;div class="card-header"&gt;Create A Talk&lt;/div&gt;
                    &lt;div class="card-body"&gt;
                        &lt;p&gt;
                            Use the form below to create a talk that can be submitted to OpenCFP instances that are
                            using OpenCFP Central
                        &lt;/p&gt;
                            &lt;form method="post" action="/talk/create"&gt;
                                @csrf
                                @include('talk.form')
                                &lt;button type="submit" class="btn btn-primary"&gt;Create Talk&lt;/button&gt;
                            &lt;/form&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
@endsection
</code></pre>

<p>Now the test passes!</p>

<p>I hope this blog post helps you understand what a TDD flow with an app under
real conditions looks like.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Why GrumpyConf Has No Sponsors]]></title>
            <link href="/atthekeyboard/2018/11/08/why-grumpyconf-has-no-sponsors/"/>
            <updated>2018-11-08T00:00:00+00:00</updated>
            <id>/atthekeyboard/2018/11/08/why-grumpyconf-has-no-sponsors/</id>
            <content type="html"><![CDATA[<p><a href="https://grumpy-learning.com/grumpyconf2019.php">GrumpyConf 2019</a> will mark
the 7th conference I've been involved in running:</p>

<ul>
<li>CakeFest in Orlando, Florida, USA in 2008</li>
<li>TrueNorthPHP in Mississauga, Ontario, Canada from 2012 until 2016</li>
<li>GrumpyConf in Ingersoll, Ontario, Canada starting in 2018</li>
</ul>

<p>As I helped organize these events, I quickly came to understand that the role
of sponsors is to help offset the costs of running these events. In exchange,
you promise to give them access to your attendees in a number of ways:</p>

<ul>
<li>keynotes/talks/hackathons related to their products</li>
<li>booths or tables for outreach</li>
<li>paying for meals and/or snacks</li>
<li>swag to give to attendees and sometimes speakers</li>
</ul>

<p>I have never been shy about asking for sponsorship of my events because 
they are expensive to run and I have certain ideas and standards I want
to stick to.</p>

<p>But what do you do when the normal ways you have to reward sponsors aren't
available? This is the dilemma I face with GrumpyConf.</p>

<p>The idea of GrumpyConf is to have a small event at a somewhat isolated
location and set up conditions where the attendees mingle with speakers
who have experience solving tough problems and have great personal skils.
If you're looking for an event that will show you a path to "levelling up"
your skills to further your career, this is the one for you.</p>

<p>The event is not cheap because it's at a <a href="http://www.elmhurstinn.com/">nice resort</a>
and the ticket includes three nights' stay and meals. Plus I pay my speakers'
travel expenses and hotel. So I set the prices to make sure I could break
even if the same number of folks come who did last year. It's entirely
funded out of my pocket through ticket sales and whatever other expenses I
need to cover. As long as I don't have to put a lot of my own money into
the event, I can continue to run it. I am not a charity and will not run
an event at any kind of substantial loss.</p>

<p>I would love sponsorship of my event to defray the costs of my speakers.
But I am at a lost to figure out what I can give these generous sponsors
in exchange for their money.</p>

<p>If you are interested in sponsoring GrumpyConf 2019, please get in touch
with me. My contact information is in the sidebar (on desktop) or all the
way at the bottom in mobile versions.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Maybe This Book Isn&#039;t For You]]></title>
            <link href="/atthekeyboard/2018/10/22/maybe-this-book-isnt-for-you/"/>
            <updated>2018-10-22T00:00:00+00:00</updated>
            <id>/atthekeyboard/2018/10/22/maybe-this-book-isnt-for-you/</id>
            <content type="html"><![CDATA[<p>(Author note -- I am trying to do more blogging and less long
Twitter threads.)</p>

<p>Recently I had a very respectful conversation with someone who bought
one of my books (The <a href="https://leanpub.com/grumpy-phpunit">PHPUnit Cookbook</a>)
and is not happy with the book. They have pointed out the things they
don't like and believe are wrong, and finished off one email with the
phrase "sorry if I am coming across as harsh".</p>

<p>In my response I did say that I am not offended by feedback. Some feedback
is helpful. Some is not. All I can control is how I choose to react to
that feedback. Like my mother taught me: we're not losers, we're choosers.</p>

<p>I did finish off the conversation by pointing
out that LeanPub offers a money-back guarantee on all their books. I am not
offended by anyone taking LeanPub up on that offer. I would prefer to
have happy customers rather than ones who felt they wasted their money
on one of my books.</p>

<p>Maybe that book just isn't a good fit for them.</p>
]]></content>
        </entry>
    </feed>