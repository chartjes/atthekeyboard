--- 
layout: post
title: Why Exception Handling Matters
---
<p>
As I start working on PHP 5 projects in my own time (and pushing for the upgrade of our sites to PHP 5 at work) I'm gaining more exposure to the newer features of PHP 5.  The big one for me is the try-catch-throw exception handling abilities.  When I think of <a href="http://www.sexsearch.com">my old job</a> and the problems we faced with exception handling it makes me wish that we could've written it in PHP 5.
</p>
<p>
Anyhow I've been working with my friend <a href="http://derekmartin.ca">Derek Martin</a> on a component for the <a href="http://framework.zend.com">Zend Framework</a> to provide support for using <a href="http://last.fm">Last.fm</a> via <a href="http://www.audioscrobbler.net">Audioscrobller's</a> REST web services.
</p>
<p>
Since the ZF is PHP 5 only it was time to break out the try-catch-throw.  Check out how simple this can be:
</p>
<div><ol><li><div>&#160;</div></li><li><div>protected function _getInfoByUser&#40;$service&#41;</div></li><li><div>&#123;</div></li><li><div>&#160; &#160; &#160; &#160; $service = &#40;string&#41; $service;</div></li><li><div>&#160; &#160; &#160; &#160; </div></li><li><div>&#160; &#160; &#160; &#160; try &#123;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; $response = $this-&amp;gt;_rest-&amp;gt;restGet&#40;"/1.0/user/{$this-&amp;gt;user}/{$service}"&#41;;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; </div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; if &#40;$response-&amp;gt;isSuccessful&#40;&#41;&#41; &#123;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; $profile_info = simplexml_load_string&#40;$response-&amp;gt;getBody&#40;&#41;&#41;;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; return $profile_info;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#125; else &#123;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; </div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; if &#40;$response-&amp;gt;getBody&#40;&#41; == "No such user"&#41; &#123;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; throw new Zend_Service_Exception&#40;'Could not find the user ' . $this-&amp;gt;user&#41;;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#125; else &#123;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; throw new Zend_Service_Exception&#40;'The REST service ' . $service . ' returned the following status code: ' . $response-&amp;gt;getStatus&#40;&#41;&#41;;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#125;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; </div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#125;</div></li><li><div>&#160;</div></li><li><div>&#160; &#160; &#160; &#160; &#125; catch &#40;Zend_Service_Exception $e&#41; &#123;</div></li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; throw &#40;$e&#41;;</div></li><li><div>&#160; &#160; &#160; &#160; &#125;</div></li><li><div>&#160;</div></li><li><div>&#125;</div></li><li><div>&#160;</div></li></ol></div>

<p>
So, if there are any errors generated I "throw" an exception that the framework can handle.  I then "catch" that exception and "throw" it up another level, where the controller (which is calling the above code in question) catches the exception I originally created.  Nice and easy.  Thanks to <a href="http://www.slash7.com">Amy Hoy</a> for giving me a 60 second clinic on try-catch-throw via IM yesterday.
</p>
<p>
Next week has been decleared "Proposals Week" on the Zend Framework mailing list, so Derek and I are trying to get our contribution together so that we can submit it next week.  Last.fm and Audioscrobbler are a neat technology that I use all the time to track my own musical tastes and find things that I like.  Hopefully the other users like it enough that it gets accepted.
</p>
